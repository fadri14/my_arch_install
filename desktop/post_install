#!/bin/bash

if [[ $(whoami) != "root" ]]
then
    echo "Il faut être root"
    exit 1
fi

echo -en "\033[34m\t----- Post installation -----\033[0m\n\n"

echo -e "\033[34m--- Activation de scrub ---\033[0m"
# C'est la checksum du système btrfs
systemctl enable --now btrfs-scrub@-.timer

echo -e "\033[34m--- Configuration et activation du pare-feu ---\033[0m"
ufw default deny
ufw default allow outgoing
ufw allow https
ufw allow ssh
ufw allow 631/tcp # Pour autoriser l'imprimante
ufw allow 40818 # Pour nitroshare
ufw limit ssh
ufw enable
systemctl enable ufw.service

echo -e "\033[34m--- Installation de snapper ---\033[0m"
pacman --noconfirm -S snapper snap-pac

echo -e "\033[34m--- Configuration de snapper ---\033[0m"
umount /.snapshots/
rm -rf /.snapshots/
snapper -c root create-config /
snapper -c home create-config /home
chmod a+rx /home/.snapshots
chown :adrien /home/.snapshots
systemctl enable --now snapper-timeline.timer
systemctl enable --now snapper-cleanup.timer

cat << EOF > /etc/snapper/configs/root
SUBVOLUME="/"
FSTYPE="btrfs"
QGROUP=""
SPACE_LIMIT="0.5"
FREE_LIMIT="0.2"
ALLOW_USERS=""
ALLOW_GROUPS=""
SYNC_ACL="no"
BACKGROUND_COMPARISON="yes"
NUMBER_CLEANUP="yes"
NUMBER_MIN_AGE="1800"
NUMBER_LIMIT="15"
NUMBER_LIMIT_IMPORTANT="10"
TIMELINE_CREATE="yes"
TIMELINE_CLEANUP="yes"
TIMELINE_MIN_AGE="1800"
TIMELINE_LIMIT_HOURLY="2"
TIMELINE_LIMIT_DAILY="2"
TIMELINE_LIMIT_WEEKLY="3"
TIMELINE_LIMIT_MONTHLY="0"
TIMELINE_LIMIT_YEARLY="0"
EMPTY_PRE_POST_CLEANUP="yes"
EMPTY_PRE_POST_MIN_AGE="1800"
EOF

cat << EOF > /etc/snapper/configs/home
SUBVOLUME="/home"
FSTYPE="btrfs"
QGROUP=""
SPACE_LIMIT="0.5"
FREE_LIMIT="0.2"
ALLOW_USERS="adrien"
ALLOW_GROUPS=""
SYNC_ACL="no"
BACKGROUND_COMPARISON="yes"
NUMBER_CLEANUP="yes"
NUMBER_MIN_AGE="1800"
NUMBER_LIMIT="15"
NUMBER_LIMIT_IMPORTANT="10"
TIMELINE_CREATE="yes"
TIMELINE_CLEANUP="yes"
TIMELINE_MIN_AGE="1800"
TIMELINE_LIMIT_HOURLY="2"
TIMELINE_LIMIT_DAILY="2"
TIMELINE_LIMIT_WEEKLY="3"
TIMELINE_LIMIT_MONTHLY="0"
TIMELINE_LIMIT_YEARLY="0"
EMPTY_PRE_POST_CLEANUP="yes"
EMPTY_PRE_POST_MIN_AGE="1800"
EOF

echo -e "\033[34m--- Création des premiers instantanés ---\033[0m"
snapper -c root create --type single --cleanup-algorithm number --description 'backup_root'
snapper -c home create --type single --cleanup-algorithm number --description 'backup_home'

user_commands=$(cat << 'END'
echo -e "\033[34m--- Installation de la zram ---\033[0m"
cd ~/.config/myscripts
sudo ./install_zram_state
cd ~

echo -e "\033[34m--- Configuration de l'agent gpg ---\033[0m"
echo "default-cache-ttl 3600
pinentry-program /usr/bin/pinentry-qt5" > ~/.gnupg/gpg-agent.conf
END)

su - adrien -c "$user_commands"

echo "Le backup sera monté dans /mnt"
read -p "Voulez-vous faire une installation d'un backup [y|n] " res

if [[ "$res" = "y" ]]
then
    echo -e "\033[34m--- Montage du disque backup ---\033[0m"
    mount /dev/sdb1 /mnt

    user_commands=$(cat << 'END'
    echo -e "\033[34m--- Installation du backup ---\033[0m"
    cd /mnt
    PATH="$HOME/.config/myscripts/:$PATH"
    backup i
    cd ~
    END)

    su - adrien -c "$user_commands"

    echo -e "\033[34m--- Démontage du disque backup ---\033[0m"
    umount /mnt
fi

echo "
Il faut également créer une clé gpg et activer pass
gpg2 --full-generate-key # Création de la clé
gpg2 --list-secret-keys --keyid-format LONG # Afficher l'id de la clé
pass init 'AAAA2222CCCC4444' # Initialiser pass avec l'id de la clé"

echo -e "\033[34m--- Fin de la post-installation ---\033[0m"

